import React, { useState } from "react";
import {
	Bot,
	User,
	Sparkles,
	MessageCircle,
	Volume2,
	Settings,
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";

interface GuideCharacter {
	id: string;
	name: string;
	type: "human" | "robot" | "fairy-tale";
	avatar: string;
	personality: string;
	specialization: string;
}

const AIGuide = () => {
	const [selectedCharacter, setSelectedCharacter] = useState<string>("");
	const [isListening, setIsListening] = useState(false);
	const [chatMessages, setChatMessages] = useState([
		{
			id: "1",
			sender: "guide",
			message:
				"–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–≥–∏–¥. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–∑–∞–±—ã–≤–∞–µ–º–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –†–æ—Å—Å–∏–∏!",
			timestamp: new Date(),
		},
	]);

	const characters: GuideCharacter[] = [
		{
			id: "elena",
			name: "–ï–ª–µ–Ω–∞",
			type: "human",
			avatar: "üë©‚Äçü¶∞",
			personality: "–î—Ä—É–∂–µ–ª—é–±–Ω–∞—è –∏ –æ–ø—ã—Ç–Ω–∞—è",
			specialization: "–ò—Å—Ç–æ—Ä–∏–∫-–∫—Ä–∞–µ–≤–µ–¥",
		},
		{
			id: "robo",
			name: "–†O–ëO-–ì–∏–¥",
			type: "robot",
			avatar: "ü§ñ",
			personality: "–¢–æ—á–Ω—ã–π –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω—ã–π",
			specialization: "–ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ –ª–æ–≥–∏—Å—Ç–∏–∫–∞",
		},
		{
			id: "firebird",
			name: "–ñ–∞—Ä-–ø—Ç–∏—Ü–∞",
			type: "fairy-tale",
			avatar: "üî•üê¶",
			personality: "–ú–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∏ –º—É–¥—Ä–∞—è",
			specialization: "–§–æ–ª—å–∫–ª–æ—Ä –∏ —Ç—Ä–∞–¥–∏—Ü–∏–∏",
		},
	];

	const handleSendMessage = (message: string) => {
		const newMessage = {
			id: Date.now().toString(),
			sender: "user",
			message,
			timestamp: new Date(),
		};
		setChatMessages([...chatMessages, newMessage]);

		setTimeout(() => {
			const aiResponse = {
				id: (Date.now() + 1).toString(),
				sender: "guide",
				message: "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –Ø –ø–æ–¥–±–µ—Ä—É –¥–ª—è –≤–∞—Å –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã...",
				timestamp: new Date(),
			};
			setChatMessages((prev) => [...prev, aiResponse]);
		}, 1000);
	};

	return (
		<div className="space-y-6">
			<Card>
				<CardHeader>
					<CardTitle className="flex items-center gap-2">
						<Sparkles className="w-5 h-5 text-purple-500" />
						–í—ã–±–æ—Ä AI-–≥–∏–¥–∞
					</CardTitle>
				</CardHeader>
				<CardContent>
					<div className="grid grid-cols-1 md:grid-cols-3 gap-4">
						{characters.map((character) => (
							<div
								key={character.id}
								className={`p-4 border-2 rounded-lg cursor-pointer transition-all duration-200 ${
									selectedCharacter === character.id
										? "border-purple-500 bg-purple-50"
										: "border-gray-200 hover:border-purple-300"
								}`}
								onClick={() => setSelectedCharacter(character.id)}
							>
								<div className="text-center">
									<div className="text-4xl mb-2">{character.avatar}</div>
									<h3 className="font-semibold text-gray-800">
										{character.name}
									</h3>
									<p className="text-sm text-gray-600 mb-2">
										{character.personality}
									</p>
									{/* <Badge variant="secondary" className="text-gray-50 text-wrap">
										{character.specialization}
									</Badge> */}
								</div>
							</div>
						))}
					</div>
				</CardContent>
			</Card>

			{/* Chat Interface */}
			<Card>
				<CardHeader>
					<CardTitle className="flex items-center justify-between">
						<div className="flex items-center gap-2">
							<MessageCircle className="w-5 h-5 text-blue-500" />
							–î–∏–∞–ª–æ–≥ —Å AI-–≥–∏–¥–æ–º
						</div>
						<div className="flex gap-2">
							<Button
								variant="outline"
								size="sm"
								onClick={() => setIsListening(!isListening)}
								className={isListening ? "bg-red-50 border-red-300" : ""}
							>
								<Volume2 className="w-4 h-4" />
								{isListening ? "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" : "–ì–æ–ª–æ—Å"}
							</Button>
							<Button variant="outline" size="sm">
								<Settings className="w-4 h-4" />
							</Button>
						</div>
					</CardTitle>
				</CardHeader>
				<CardContent>
					{/* Chat Messages */}
					<div className="bg-background rounded-lg p-4 h-64 overflow-y-auto mb-4 space-y-3">
						{chatMessages.map((msg) => (
							<div
								key={msg.id}
								className={`flex ${
									msg.sender === "user" ? "justify-end" : "justify-start"
								}`}
							>
								<div
									className={`max-w-xs p-3 rounded-lg ${
										msg.sender === "user"
											? "bg-blue-500 text-white"
											: "bg-black border border-gray-200"
									}`}
								>
									<p className="text-sm">{msg.message}</p>
								</div>
							</div>
						))}
					</div>

					{/* Quick Actions */}
					<div className="space-y-2">
						<p className="text-sm font-medium text-gray-700">
							–ë—ã—Å—Ç—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã:
						</p>
						<div className="flex flex-wrap gap-2">
							{[
								"–õ—É—á—à–∏–µ –æ—Ç–µ–ª–∏ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ?",
								"–ì–¥–µ –∑–∞–ø—Ä–∞–≤–∏—Ç—å—Å—è?",
								"–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä—è–¥–æ–º?",
								"–ú–µ—Å—Ç–Ω–∞—è –∫—É—Ö–Ω—è?",
							].map((question) => (
								<Button
									key={question}
									variant="outline"
									size="sm"
									className="text-xs"
									onClick={() => handleSendMessage(question)}
								>
									{question}
								</Button>
							))}
						</div>
					</div>

					{/* Message Input */}
					<div className="flex gap-2 mt-4">
						<input
							type="text"
							placeholder="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å AI-–≥–∏–¥—É..."
							className="flex-1 p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
							onKeyPress={(e) => {
								if (e.key === "Enter") {
									handleSendMessage((e.target as HTMLInputElement).value);
									(e.target as HTMLInputElement).value = "";
								}
							}}
						/>
						<Button>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</Button>
					</div>
				</CardContent>
			</Card>

			{/* AI Guide Features */}
			<Card>
				<CardHeader>
					<CardTitle>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ AI-–≥–∏–¥–∞</CardTitle>
				</CardHeader>
				<CardContent>
					<div className="grid grid-cols-1 md:grid-cols-2 gap-4">
						<div className="space-y-3">
							<h4 className="font-semibold text-gray-800">
								–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
							</h4>
							<ul className="space-y-2 text-sm text-gray-600">
								<li>‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é</li>
								<li>‚Ä¢ –£—á–µ—Ç –ª–∏—á–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π</li>
								<li>‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫</li>
								<li>‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ</li>
							</ul>
						</div>

						<div className="space-y-3">
							<h4 className="font-semibold text-gray-800">
								–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
							</h4>
							<ul className="space-y-2 text-sm text-gray-600">
								<li>‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏ –∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏—è</li>
								<li>‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–µ–¥–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–∏–∫–∞</li>
								<li>‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–æ—Ü—Å–µ—Ç—è–º–∏</li>
								<li>‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞</li>
							</ul>
						</div>
					</div>
				</CardContent>
			</Card>
		</div>
	);
};

export default AIGuide;
